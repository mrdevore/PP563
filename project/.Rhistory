dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.00005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(110, 3500, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
m=0.5
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(110, 3500, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
m=0
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.002*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(100, 25000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
#get list
round(out,2)
m=0
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.002*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(40, 25000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
#get list
round(out,2)
m=0.5
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(110, 3500, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.5
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(10, 10000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.5
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(10, 15000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.25
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(100, 4000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.25
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(90, 20000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.25
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.25
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.25
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.75
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=1
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.9
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.8
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.7
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.6
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.75
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
m=0.85
z=0.25
HILR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dHs <- -b * Hs * I
dHr <- -b*z*Hr*I
dL <- b*Hs*I + b*z*Hr*I - w*L
dI <- w*L - u * I
dR <- u * I
return(list(c(dHs, dHr, dL, dI, dR)))
})
}
parameters <- c(b = 0.0005*(1-m + m*z), w = 0.004, u = 0.2)
state <- c(Hs = (1-m)*H0, Hr = m*H0, L = 0.0, I = 1, R = 0.0)
times <- seq(0, 137, by = 1)
out <- as.data.frame(ode(y = state, times = times, func = HILR, parms = parameters))
matplot(times, out[,2:6], type = "l", xlab = "Time", ylab = "Healthy and Removed", main = "HLIR Model", lwd = 1, lty = 1, bty = "l", col = 2:6)
legend(80, 23000, c("Hs", "Hr", "Latent", "Infecteds", "Removed"), pch = 1, col = 2:6)
round(out,2)
x <- 3
rmv x
my_vector <- c(3,6,9)
my_vector
my_vector[2]
my_vector * 4
my_vector <- my_vector * 4
iris
View(iris)
iris[1,2]
iris[3,21]
iris[21,3]
iris[2]
iris[2,]
iris$Sepal.Length
install.packages("adegenet", dep=TRUE)
install.packages("phangorn", dep=TRUE)
library(ape)
library(adegenet)
install.packages("adegenet", dep=TRUE)
install.packages("phangorn", dep=TRUE)
library(ape)
library(adegenet)
library(phangorn)
library(ape)
library(adegenet)
library(phangorn)
#add the dataset, this one is a toy data set for practice (influenza data from 1993-2008)
dna <- fasta2DNAbin(file="http://adegenet.r-forge.r-project.org/files/usflu.fasta")
dna
>as.character(dna)[1:5,1:10]
as.character(dna)[1:5,1:10]
D <- dist.dna(dna, model="TN93")
#make the tree
tre <- nj(D)
#reorganize the tree by laddering
tre <- ladderize(tre)
plot(tre, cex=.6)
title("A simple NJ tree")
plot(tre, cex=.6)
title("A simple NJ tree")
#PARSIMONY BASED TREE
##convert the (dna) to a "phangorn object"
dna2 <- as.phyDat(dna)
tre.ini <- nj(dist.dna(dna,model="raw"))
parsimony(tre.ini, dna2)
Final p-score 420 after  2 nni operations
##search for the maximum parsimony tree
> tre.pars <- optim.parsimony(tre.ini, dna2)
##search for the maximum parsimony tree
tre.pars <- optim.parsimony(tre.ini, dna2)
##plot the tree :)
plot(tre.pars, cex=0.6)
##ew! ladderize?
Ptre <- ladderize(tre.pars)
plot(Ptre, cex-0.6)
plot(Ptre, cex=0.6)
plot(Ptre, cex=0.6)
tre2 <- root(tree, out=1)
re, out=1)
tre2 <- root(tre,out=1)
tre2 <- ladderize(tre2)
plot(tre2)
plot(tre2,cex=0.6) #cex=text size
source("~/.active-rstudio-document")
parsimony(tre.ini, dna2)
plot(tre.pars, type="unr", cex=0.6)
setwd("~/Desktop/PP563/project")
MSA_TCoffee <- read.alignment(file="allseqs.aln", format="clustal")
library(ape)
library(adegenet)
library(phangorn)
MSA_TCoffee <- read.alignment(file="allseqs.aln", format="clustal")
MSA_TCoffee <- read.alignment(file="allseqs.aln", format="clustal")
library(ape)
library(adegenet)
library(phangorn)
library(seqinr)
MSA_TCoffee <- read.alignment(file="allseqs.aln", format="clustal")
)
class(MSA_TCoffee)
library(ape)
library(adegenet)
library(phangorn)
library(seqinr)
MSA_TCoffee <- read.alignment(file="allseqs.aln", format="clustal")
class(MSA_TCoffee)
#compute the distances
D_TCoffee <- dist.alignment(MSA_TCoffee)
#make the tree
tree_TCoffee <- nj(D_TCoffee)
Ltree_TCoffee <- ladderize(tree_TCoffee)
#plot and edit the tree
plot(Ltre_TCoffee, cex=0.6)
#plot and edit the tree
plot(Ltree_TCoffee, cex=0.6)
?root
root(Ltree_TCoffee, Faustovirus)
root(Ltree_TCoffee, outgroup = Faustovirus)
root(Ltree_TCoffee, outgroup=Faustovirus)
root(Ltree_TCoffee, outgroup= "Faustovirus")
plot(Ltree_TCoffee)
tree_TCoffee <- nj(D_TCoffee)
Ltree_TCoffee <- ladderize(tree_TCoffee)
#is it rooted?
is.rooted(Ltree_TCoffee)
#no, let's root it with the outgroup
root(Ltree_TCoffee, outgroup= "Faustovirus")
tree_TCoffee <- nj(D_TCoffee)
Ltree_TCoffee <- ladderize(tree_TCoffee)
#no, let's root it with the outgroup
RootLtree_TCoffee <- root(Ltree_TCoffee, outgroup= "Faustovirus")
is.rooted(RootLtree_TCoffee)
#that didn't work, need to add another argument
RootLtree_TCoffee <- root(Ltree_TCoffee, outgroup = "Faustovirus", resolve.root = TRUE)
is.rooted(RootLtree_TCoffee)
plot(RootLtree_TCoffee)
plot(RootLtree_TCoffee, cex = 0.6)
plot(RootLtree_TCoffee, cex = 0.8)
?nj
MSA_MAFFT <- read.alignment(file="maffta-aligned-seqs.fasta", format="fasta")
MSA_MAFFT <- read.alignment(file="maffta-aligned-seqs.fasta", format="fasta")
MSA_MAFFT <- read.alignment(file="mafft-aligned-seqs.fasta", format="fasta")
D_MAFFT <- dist.alignment(MSA_MAFFT)
tree_MAFFT <- nj(D_MAFFT)
Ltree_MAFFT <- ladderize(tree_MAFFT)
plot(Ltree_MAFFT, cex=0.6)
RootLtree_MAFFT <- root(Ltree_MAFFT, outgroup = "Faustovirus", resolve.root = TRUE)
plot(RootLtree_MAFFT, cex=0.8)
plot(RootLtree_TCoffee, cex = 0.8)
library(ape)
library(adegenet)
library(phangorn)
library(seqinr)
plot(RootLtree_TCoffee, cex = 0.8)
plot(RootLtree_MAFFT, cex=0.8)
